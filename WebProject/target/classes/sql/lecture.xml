<?xml version="1.0" encoding="UTF-8" ?>
 <!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="lectureMap">
	
	<select id="getRowCount" parameterType="page_index" resultType="int">
		select count(*) from lecture
		<where>
			<!--keyword null아니지만 , search는 null-->
			<if test="keyword != null and search ==''">
				lecture_id = -1
			</if>
			<!-- keyword가 대학 -->
			<if test="keyword == 'univ' and search !=null">
				lecture_id in
				(select lecture_id from lecture where univ_name like '%${search}%')
			</if>
			<!-- keyword가 all일 경우 -->
			<if test="keyword == 'all' and search !=null">
				lecture_id in
				(select lecture_id from lecture_search 
				where char_info like '%${search}%')
			</if>
		</where>	
		
	</select>
	
	<!-- <select id="getLectureList" parameterType="java.util.HashMap" resultType="lecture"> -->
	<select id="getLectureList" parameterType="page_index" resultType="lecture">
		select * from (select a.*,rowNum rnum from (
			select * from lecture
		<where>
			<!--keyword null아니지만 , search는 null-->
			<if test="keyword != '' and search ==''">
				lecture_id = -1
			</if>
			<!--keyword가 대학-->
			<if test="keyword == 'univ' and search !=null">
				lecture_id in
				(select lecture_id from lecture where univ_name like '%${search}%')
			</if>
			<!--keyword가 all일 경우-->
			<if test="keyword == 'all' and search !=null">
				lecture_id in
				(select lecture_id from lecture_search 
				where char_info like '%'||#{search}||'%')
			</if>
		</where>		 
			 order by lecture_id desc) a )
			where rnum between #{startRow,jdbcType=INTEGER} and #{endRow,jdbcType=INTEGER}
		
	</select>
	<!-- 중복검사 -->
	
	<!-- id에 따라 강의 하나 구하기-->
	<select id="getLectureById" parameterType="int" resultType="lecture">
		select * from lecture where lecture_id=#{lecture_id}
	</select>
	
	<!-- id에 따라 강의 하나 구하기-->
	<select id="getQuestionVersionById" parameterType="int" resultType="String">
		select question_version from lecture
		where lecture_id=#{lecture_id}
	</select>
	
	<!--순서대로 구하기-->
	<select id="getQuestionVersions" resultType="String">
		select question_version from(
		
		    select sum(question_id) sum_id, question_version
		    from question
		    where is_deleted = 'n'
		    group by question_version
		    order by sum_id
		)
	</select>
<!-- 	<select id="getQuestionVersions" resultType="hashMap">
		select question_version from(
		
		    select sum(question_id) sum_id, question_version
		    from question
		    where is_deleted = 'n'
		    group by question_version
		    order by sum_id
		)
	</select>
	
	 -->	
	<select id="getQuestionnaire" parameterType="String" resultType="question">
		select * from question 
        where question_version= #{question_version,jdbcType=VARCHAR} AND is_deleted='n'
        order by question_id 
	</select>
	
	<insert id="insertLecture" parameterType="lecture">
		insert into lecture
		values(seq_lecture_no.nextval,
		#{univ_name},
		#{major},
		#{grade},
		#{semester},
		#{lecture_code},
		#{lecture_name},
		#{professor},
		#{credit},
		0,   
		0,
		'n',0,#{question_version}) 
	</insert>
	
	
	
	<insert id="insertLectureQuestionVersion" parameterType="String">
		insert into question_version values(#{question_version},'n') 
	</insert>
	<insert id="insertLectureQuestion" parameterType="hashMap">
		insert into question values(seq_question_id.nextval,#{question_version},#{question_content},'n')
	</insert>
	<insert id="insertAvgScoreById" parameterType="hashMap">
		update lecture
		set total_avg_score= #{avg_score}
		where lecture_id = #{lecture_id}
	</insert>
	<insert id="insertRatingCountById" parameterType="hashMap">
		update lecture
		set rating_count= #{rating_count}
		where lecture_id = #{lecture_id}
	</insert>
	
	<!--새로운 댓글 입력
		
	-->
	<!-- <insert id="addNewComment" parameterType="reply">
		insert into lecture_reply
		values(seq_lecture_re_no.nextval,
				#{lecture_id},
				#{email},
				seq_lecture_re_no.currval,0,
				#{content},sysdate,'n',
				nvl((select max(reply_order)
					from lecture_reply
					where lecture_id=#{lecture_id})+1,0) 
				
		) 
	</insert>
	<insert id="addReplyToComment" parameterType="reply">
		
	    insert into lecture_reply
		values(seq_lecture_re_no.nextval,
				#{lecture_id},
				#{email},
				#{ref},
				1,
				#{content},sysdate,'n', #{reply_order}+1
				
		)
	      
	</insert> -->
	<!--order가 넘어온 order보다 높을 때 수정-->
	<!-- <update id="updateBeforeAddReply" parameterType="reply">
        update lecture_reply
        set reply_order = reply_order+1
        where lecture_id = #{lecture_id}
        and reply_order &gt; #{reply_order}
           
	</update> -->
	<!--order가 넘어온 order보다 높을 때 수정-->
	<update id="updateLecture" parameterType="lecture">
        UPDATE lecture
        SET
        univ_name=#{univ_name},
		major = #{major},
		grade = #{grade},
		semester = #{semester},
		lecture_code = #{lecture_code},
		lecture_name = #{lecture_name},
		professor = #{professor},   
		credit = #{credit},
		question_version =#{question_version}
        where lecture_id = #{lecture_id}
           
	</update>
	<update id="deleteLecture" parameterType="int">
        DELETE lecture
        where lecture_id = #{lecture_id}
	</update>


	<update id="deleteQuestion" parameterType="String">
		update question
		set is_deleted ='y'
		where question_version =#{question_version}

	</update>
	
	<update id="updateQuestion" parameterType="question">
		update question
		set question_content =#{question_content}
		where question_id= #{question_id}
	</update>

</mapper>








